
# 쇼핑몰 프로젝트 테이블

# 상품 카테고리 테이블(소설, 자기계발...)
CREATE TABLE BOOK_CATEGORY (
	CATE_CODE INT PRIMARY KEY AUTO_INCREMENT 	#카테고리 코드
	, CATE_NAME VARCHAR(30) NOT NULL UNIQUE	#카테고리 이름
);


INSERT INTO BOOK_CATEGORY VALUES (1, 'IT/인터넷');
INSERT INTO BOOK_CATEGORY VALUES (2, '소설');
INSERT INTO BOOK_CATEGORY VALUES (3, '자기계발');
COMMIT;
SELECT * FROM book_category;
SELECT * FROM book;

# 도서 테이블
CREATE TABLE BOOK(
	BOOK_CODE INT PRIMARY KEY AUTO_INCREMENT
	, BOOK_NAME VARCHAR(30) NOT NULL
	, BOOK_PRICE INT NOT NULL
	, PUBLISHER VARCHAR(30) NOT NULL
	, BOOK_INFO VARCHAR(100)
	, REG_DATE DATETIME DEFAULT SYSDATE()
	, BOOK_STOCK INT DEFAULT 10 
	, CATE_CODE INT NOT NULL REFERENCES book_category (CATE_CODE)
);

# 도서 이미지 정보
CREATE TABLE BOOK_IMG(
	IMG_CODE INT PRIMARY KEY AUTO_INCREMENT
	, ORIGIN_FILE_NAME VARCHAR(100) NOT NULL
	, ATTACHED_FILE_NAME VARCHAR(100) NOT NULL
	, IS_MAIN VARCHAR(3) NOT NULL
	, BOOK_CODE INT NOT NULL REFERENCES book (BOOK_CODE) ON DELETE CASCADE
)

# 한 번에 여러 데이터 INSERT 하기
INSERT INTO BOOK_IMG
	(IMG_CODE, ORIGIN_FILE_NAME, ATTACHED_FILE_NAME, IS_MAIN, BOOK_CODE)
VALUES
	(1, 'aaa-IMG', '1111-2222.jpg', 'Y', 1),
	(3, 'aaa-IMG', '1111-2222.jpg', 'N', 1);
	
ROLLBACK;


# 쇼핑몰 회원 테이블
CREATE TABLE SHOP_USER(
	USER_ID VARCHAR(30) PRIMARY KEY
	, USER_PW VARCHAR(30) NOT NULL
	, USER_NAME VARCHAR(10) NOT NULL
	, USER_EMAIL VARCHAR(30)
	, USER_TEL VARCHAR(16) NOT NULL UNIQUE
	, USER_ROLL VARCHAR(10) DEFAULT 'USER'		#권한 : USER-사용자, ADMIN-관리자
	, IS_USING VARCHAR(10) DEFAULT 'Y'			#상태 : Y - 사용 중, N - 탈퇴
	, JOIN_DATE DATETIME DEFAULT SYSDATE()
);


SELECT *
FROM BOOK_CATEGORY
WHERE CATE_NAME ='소설';

SELECT * FROM shop_user;

#관리자 정보 insert
INSERT INTO shop_user 
VALUES ('admin', 'admin', '관리자', 'admin@gmail.com', '010-1111-1111', 'ADMIN', 'Y', NOW());

SELECT * FROM book;

#도서 이미지 정보 



SELECT * FROM board;
SELECT * FROM board_reply;


# 모든 상품에 대해서 첨부된 상품이미지명, 상품명, 가격을 조회
# 메인 이미지만 조회
SELECT BOOK_NAME, BOOK_PRICE, ATTACHED_FILE_NAME
FROM BOOK INNER JOIN book_img
IN book.BOOK_CODE = book_img.BOOK_CODE
WHERE IS_MAIN = 'Y';

SELECT * FROM book_img;
SELECT * FROM book;

DELETE FROM book;
COMMIT;

#BOOK 테이블에 저장된 BOOK_CODE 중 가장 큰 수 조회
SELECT IFNULL(MAX(BOOK_CODE), 0) + 1 FROM book;

#도서 상품 목록 조회
#도서번호, 도서명, 도서 가격, 첨부된 상품명

SELECT B.BOOK_CODE
		, BOOK_NAME 
		, BOOK_PRICE
		, ATTACHED_FILE_NAME
FROM book B INNER JOIN book_img I
ON B.BOOK_CODE = I.BOOK_CODE
WHERE IS_MAIN = 'Y'
AND B.BOOK_CODE = 5;








